import { redirect, notFound } from 'next/navigation'
import { createSsrServerClient } from '@/lib/ssr-server'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { formatDateTime } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import Link from 'next/link'
import { ArrowLeft, Download, FileText } from 'lucide-react'
import { Badge } from '@/components/ui/badge'

export default async function InvoicePage({ params }: { params: { id: string } }) {
  // Obtenemos el ID de factura de forma segura
  const facturaId = params?.id ? String(params.id) : ''
  
  // Usando el cliente SSR que maneja adecuadamente las cookies
  const supabase = await createSsrServerClient()
  
  // Autenticar al usuario usando getUser() - más seguro que getSession()
  const { data: { user }, error: userAuthError } = await supabase.auth.getUser()
  if (userAuthError || !user) {
    console.error('Error de autenticación:', userAuthError)
    redirect('/login')
  }

  // Verificar el rol del usuario
  const { data: userDetails, error: userError } = await supabase
    .from('usuarios')
    .select('id, code, email, rol, color_perfil, last_login')
    .eq('id', user.id)
    .single()
  
  // Logs para diagnóstico
  console.log('Server Session user ID:', user.id)
  console.log('Server User details response:', userDetails)
  
  if (userError) {
    console.error('Error al obtener detalles del usuario:', userError)
  }

  // Permitimos acceso independientemente del rol para diagnóstico
  if (userDetails?.rol !== 'admin') {
    console.log(`ADVERTENCIA: El usuario tiene rol '${userDetails?.rol}' que no es 'admin'`)
    // Comentado para diagnóstico: redirect('/dashboard')
  }
  
  console.log('Buscando factura con ID:', facturaId)
  
  // Consulta optimizada para traer correctamente todos los datos relacionados
  const { data: factura, error } = await supabase
    .from('facturas')
    .select(`
      id, code, created_at, id_presupuesto, total, pdf_url, datos_afip,
      presupuestos_finales!inner (
        id, code, id_tarea, id_edificio,
        tareas:id_tarea (id, titulo, code),
        edificios:id_edificio (id, nombre, direccion)
      )
    `)
    .eq('id', facturaId)
    .single()

  if (error || !factura) {
    console.error('Error al cargar la factura:', error?.message)
    notFound()
  }

  // Consultar los items específicos de la factura
  const { data: itemsFactura, error: itemsError } = await supabase
    .from('items_factura')
    .select('*')
    .eq('id_factura', facturaId)
    .order('id', { ascending: true })
    
  if (itemsError) {
    console.error('Error al cargar items de factura:', itemsError.message)
  }
  
  // Como respaldo, consultamos los items del presupuesto si no hay items_factura
  const { data: items } = await supabase
    .from('items')
    .select('id, descripcion, cantidad, precio_unitario, total')
    .eq('id_presupuesto', factura.id_presupuesto)
    .order('id', { ascending: true })

  // Extraemos las entidades relacionadas para un acceso más seguro
  const presupuestoFinal = Array.isArray(factura.presupuestos_finales) 
    ? factura.presupuestos_finales[0] 
    : factura.presupuestos_finales;
  const tarea = presupuestoFinal?.tareas?.[0];
  const edificio = presupuestoFinal?.edificios?.[0];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Button variant="ghost" size="sm" asChild className="mr-2">
            <Link href="/dashboard/facturas">
              <ArrowLeft className="h-4 w-4 mr-1" /> Volver
            </Link>
          </Button>
          <h1 className="text-2xl font-bold tracking-tight">Factura {factura.code}</h1>
        </div>
      </div>

      <div className="space-y-6">
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>Detalles de la Factura</CardTitle>
              <Badge variant="outline">Factura #{factura.code}</Badge>
            </div>
            <CardDescription>Creada el {formatDateTime(factura.created_at)}</CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4 sm:grid-cols-2">
            <div>
              <h3 className="font-medium mb-1">Tarea asociada</h3>
              {tarea ? (
                <Link
                  href={`/dashboard/tareas/${tarea.id}`}
                  className="text-primary hover:underline"
                >
                  {tarea.titulo} ({tarea.code})
                </Link>
              ) : <p className="text-muted-foreground">N/A</p>}
            </div>

            <div>
              <h3 className="font-medium mb-1">Edificio</h3>
              <p>
                {edificio?.nombre || 'Sin edificio'}
                {edificio?.direccion && ` - ${edificio.direccion}`}
              </p>
            </div>

            <div>
              <h3 className="font-medium mb-1">Presupuesto Final</h3>
              {presupuestoFinal ? (
                <Link
                  href={`/dashboard/presupuestos-finales/${presupuestoFinal.id}`}
                  className="flex items-center text-primary hover:underline"
                >
                  <FileText className="h-4 w-4 mr-1" />
                  {presupuestoFinal.code}
                </Link>
              ) : <p className="text-muted-foreground">N/A</p>}
            </div>

            <div>
              <h3 className="font-medium mb-1">Datos AFIP</h3>
              <p>{factura.datos_afip || 'No especificado'}</p>
            </div>

            <div className="sm:col-span-2">
              <h3 className="font-medium mb-1">Total</h3>
              <p className="text-2xl font-bold">${factura.total.toLocaleString('es-AR')}</p>
            </div>

            {factura.pdf_url && (
              <div className="sm:col-span-2">
                <h3 className="font-medium mb-1">PDF</h3>
                <a
                  href={factura.pdf_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center text-primary hover:underline"
                >
                  <Download className="h-4 w-4 mr-1" />
                  Descargar factura
                </a>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Verificar si hay items para mostrar (de factura o del presupuesto) */}
        {((itemsFactura && itemsFactura.length > 0) || (items && items.length > 0)) && (
          <Card>
            <CardHeader>
              <CardTitle>Items de la Factura</CardTitle>
              {itemsFactura && itemsFactura.length > 0 && (
                <CardDescription>Mostrando items específicos de esta factura</CardDescription>
              )}
              {(!itemsFactura || itemsFactura.length === 0) && items && items.length > 0 && (
                <CardDescription>Mostrando items del presupuesto asociado</CardDescription>
              )}
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Descripción</TableHead>
                    <TableHead className="text-right">Cantidad</TableHead>
                    <TableHead className="text-right">Precio unitario</TableHead>
                    <TableHead className="text-right">Total</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {(itemsFactura && itemsFactura.length > 0) ? (
                    // Mostrar los items específicos de la factura
                    itemsFactura.map((item) => (
                      <TableRow key={item.id}>
                        <TableCell>{item.descripcion || 'Sin descripción'}</TableCell>
                        <TableCell className="text-right">{item.cantidad || 1}</TableCell>
                        <TableCell className="text-right">${item.precio_unitario?.toLocaleString('es-AR') || '0'}</TableCell>
                        <TableCell className="text-right">${item.total?.toLocaleString('es-AR') || '0'}</TableCell>
                      </TableRow>
                    ))
                  ) : (
                    // Mostrar los items del presupuesto como respaldo
                    items?.map((item) => (
                      <TableRow key={item.id}>
                        <TableCell>{item.descripcion}</TableCell>
                        <TableCell className="text-right">{item.cantidad}</TableCell>
                        <TableCell className="text-right">${item.precio_unitario?.toLocaleString('es-AR')}</TableCell>
                        <TableCell className="text-right">${item.total?.toLocaleString('es-AR')}</TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}

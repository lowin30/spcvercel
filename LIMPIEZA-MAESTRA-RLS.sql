-- =============================================
-- LIMPIEZA MAESTRA DE POL√çTICAS RLS
-- Tablas: usuarios + trabajadores_tareas
-- De 23 pol√≠ticas ‚Üí 6 pol√≠ticas (-17)
-- CORRIGE 3 BRECHAS DE SEGURIDAD CR√çTICAS
-- =============================================

-- ‚ö†Ô∏è IMPORTANTE: Este script corrige problemas de seguridad:
-- 1. Acceso p√∫blico a usuarios
-- 2. Creaci√≥n p√∫blica de usuarios
-- 3. Trabajadores con permisos ALL (crear/editar/eliminar asignaciones)

-- =============================================
-- VERIFICACI√ìN PREVIA
-- =============================================

SELECT 
  '=== ANTES DE LIMPIEZA ===' as estado,
  tablename,
  COUNT(*) as num_politicas
FROM pg_policies
WHERE tablename IN ('usuarios', 'trabajadores_tareas')
GROUP BY tablename
ORDER BY tablename;

-- =============================================
-- PARTE 1: LIMPIEZA TABLA usuarios (11 ‚Üí 3)
-- =============================================

SELECT '=== LIMPIANDO TABLA usuarios ===' as seccion;

-- 1.1 ELIMINAR POL√çTICAS PELIGROSAS
DROP POLICY IF EXISTS "Permitir lectura de usuarios a anonimos" ON usuarios;
-- ‚ö†Ô∏è Acceso p√∫blico (condici√≥n: true)

DROP POLICY IF EXISTS "Insert users" ON usuarios;
-- ‚ö†Ô∏è Cualquiera crea usuarios (condici√≥n: null)

-- 1.2 ELIMINAR DUPLICADO DE SUPERVISOR
DROP POLICY IF EXISTS "supervisor_select_usuarios" ON usuarios;
-- Duplicada con "Supervisores pueden ver usuarios"

-- 1.3 ELIMINAR REDUNDANTES (cubiertas por ALL propio)
DROP POLICY IF EXISTS "users_select_own_profile" ON usuarios;
DROP POLICY IF EXISTS "Select users" ON usuarios;
DROP POLICY IF EXISTS "users_update_own_profile" ON usuarios;
DROP POLICY IF EXISTS "Update users" ON usuarios;
DROP POLICY IF EXISTS "Delete users" ON usuarios;

-- =============================================
-- PARTE 2: LIMPIEZA TABLA trabajadores_tareas (12 ‚Üí 3)
-- =============================================

SELECT '=== LIMPIANDO TABLA trabajadores_tareas ===' as seccion;

-- 2.1 ELIMINAR DUPLICADOS DE ADMIN
DROP POLICY IF EXISTS "Permitir acceso a admin" ON trabajadores_tareas;
-- Duplicada con "Admin puede gestionar todas las asignaciones de trabajadores"

DROP POLICY IF EXISTS "Enable delete for admins and supervisors" ON trabajadores_tareas;
-- Redundante (admin tiene ALL)

-- 2.2 ELIMINAR REDUNDANTES DE SUPERVISOR
DROP POLICY IF EXISTS "Supervisores pueden ver trabajadores de sus tareas" ON trabajadores_tareas;
-- Redundante (supervisor tiene ALL)

DROP POLICY IF EXISTS "Permitir a supervisores ver trabajadores de sus tareas" ON trabajadores_tareas;
-- Duplicada con anterior

DROP POLICY IF EXISTS "Supervisores pueden eliminar trabajadores de sus tareas" ON trabajadores_tareas;
-- Redundante (supervisor tiene ALL)

-- 2.3 ELIMINAR POL√çTICAS ROTAS (INSERT con null)
DROP POLICY IF EXISTS "Enable insert for admins and supervisors" ON trabajadores_tareas;
-- Condici√≥n: null (rota)

DROP POLICY IF EXISTS "Supervisores pueden agregar trabajadores a sus tareas" ON trabajadores_tareas;
-- Condici√≥n: null (rota)

-- 2.4 ELIMINAR DUPLICADO TRABAJADOR
DROP POLICY IF EXISTS "Enable read access for assigned workers" ON trabajadores_tareas;
-- Duplicada con "Trabajadores pueden ver sus asignaciones de tareas"

-- 2.5 ELIMINAR POL√çTICA PELIGROSA TRABAJADOR
DROP POLICY IF EXISTS "Permitir acceso a trabajadores" ON trabajadores_tareas;
-- ‚ö†Ô∏è ALL al trabajador (puede crear/editar/eliminar asignaciones)

-- =============================================
-- VERIFICACI√ìN FINAL
-- =============================================

SELECT 
  '=== DESPU√âS DE LIMPIEZA ===' as estado,
  tablename,
  COUNT(*) as num_politicas,
  CASE 
    WHEN tablename = 'usuarios' AND COUNT(*) = 3 THEN '‚úÖ PERFECTO'
    WHEN tablename = 'trabajadores_tareas' AND COUNT(*) = 3 THEN '‚úÖ PERFECTO'
    WHEN COUNT(*) < 3 THEN '‚ùå FALTAN POL√çTICAS'
    ELSE '‚ö†Ô∏è TODAV√çA HAY POL√çTICAS DE M√ÅS'
  END as evaluacion
FROM pg_policies
WHERE tablename IN ('usuarios', 'trabajadores_tareas')
GROUP BY tablename
ORDER BY tablename;

-- Ver detalle de pol√≠ticas que quedaron
SELECT 
  '=== POL√çTICAS FINALES ===' as seccion,
  tablename,
  policyname,
  cmd,
  CASE
    WHEN policyname LIKE '%admin%' OR policyname LIKE '%Admin%' THEN 'üëî Admin'
    WHEN policyname LIKE '%supervisor%' OR policyname LIKE '%Supervisor%' THEN 'üë®‚Äçüíº Supervisor'
    WHEN policyname LIKE '%trabajador%' OR policyname LIKE '%Trabajador%' THEN 'üë∑ Trabajador'
    WHEN policyname LIKE '%usuario%' OR policyname LIKE '%perfil%' THEN 'üë§ Usuario propio'
    ELSE '‚ùì Otro'
  END as para_quien
FROM pg_policies
WHERE tablename IN ('usuarios', 'trabajadores_tareas')
ORDER BY tablename, 
  CASE
    WHEN policyname LIKE '%admin%' OR policyname LIKE '%Admin%' THEN 1
    WHEN policyname LIKE '%supervisor%' OR policyname LIKE '%Supervisor%' THEN 2
    ELSE 3
  END;

-- =============================================
-- POL√çTICAS FINALES ESPERADAS (6 total)
-- =============================================

/*
TABLA usuarios (3):
1. "admin_all_usuarios"
   - Comando: ALL
   - Admin hace TODO

2. "Supervisores pueden ver usuarios"
   - Comando: SELECT
   - Supervisor ve usuarios (para asignar a tareas)

3. "Permitir a usuarios gestionar su propio perfil"
   - Comando: ALL
   - Usuario gestiona su PROPIO perfil

TABLA trabajadores_tareas (3):
1. "Admin puede gestionar todas las asignaciones de trabajadores"
   - Comando: ALL
   - Admin gestiona todas las asignaciones

2. "Supervisores pueden gestionar asignaciones de trabajadores en s"
   - Comando: ALL
   - Supervisor gestiona asignaciones de SUS tareas (verifica supervisores_tareas)

3. "Trabajadores pueden ver sus asignaciones de tareas"
   - Comando: SELECT
   - Trabajador solo VE sus asignaciones (no crea/edita/elimina)
*/

-- =============================================
-- RESULTADO ESPERADO
-- =============================================

/*
ANTES: 23 pol√≠ticas (11 usuarios + 12 trabajadores_tareas)
DESPU√âS: 6 pol√≠ticas (3 usuarios + 3 trabajadores_tareas)
AHORRO: -17 pol√≠ticas (74% reducci√≥n)

POL√çTICAS ELIMINADAS POR TABLA:

usuarios (8 eliminadas):
‚úÖ Permitir lectura de usuarios a anonimos (PELIGROSA)
‚úÖ Insert users (PELIGROSA)
‚úÖ supervisor_select_usuarios (DUPLICADA)
‚úÖ users_select_own_profile (REDUNDANTE)
‚úÖ Select users (REDUNDANTE)
‚úÖ users_update_own_profile (REDUNDANTE)
‚úÖ Update users (REDUNDANTE)
‚úÖ Delete users (REDUNDANTE)

trabajadores_tareas (9 eliminadas):
‚úÖ Permitir acceso a admin (DUPLICADA)
‚úÖ Enable delete for admins and supervisors (REDUNDANTE)
‚úÖ Supervisores pueden ver trabajadores... (REDUNDANTE)
‚úÖ Permitir a supervisores ver trabajadores... (DUPLICADA)
‚úÖ Supervisores pueden eliminar trabajadores... (REDUNDANTE)
‚úÖ Enable insert for admins and supervisors (ROTA)
‚úÖ Supervisores pueden agregar trabajadores... (ROTA)
‚úÖ Enable read access for assigned workers (DUPLICADA)
‚úÖ Permitir acceso a trabajadores (PELIGROSA - ALL al trabajador)

BRECHAS DE SEGURIDAD CORREGIDAS:
‚úÖ Acceso p√∫blico a usuarios eliminado
‚úÖ Creaci√≥n p√∫blica de usuarios eliminada
‚úÖ Trabajador ya no puede crear/editar/eliminar asignaciones
‚úÖ Pol√≠ticas rotas (INSERT con null) eliminadas

FUNCIONALIDAD PRESERVADA:
‚úÖ Admin sigue teniendo acceso total a TODO
‚úÖ Supervisor sigue gestionando sus tareas
‚úÖ Trabajador sigue viendo sus asignaciones
‚úÖ Usuario sigue gestionando su perfil
‚úÖ CERO cambios en comportamiento correcto
*/

-- =============================================
-- ESTAD√çSTICAS GLOBALES
-- =============================================

SELECT 
  '=== ESTAD√çSTICAS GLOBALES ===' as resultado,
  (SELECT COUNT(*) FROM pg_policies) as total_politicas_sistema,
  (SELECT COUNT(*) FROM pg_policies WHERE tablename IN ('usuarios', 'trabajadores_tareas')) as politicas_limpiadas,
  '17 pol√≠ticas eliminadas' as ahorro,
  'De 83 ‚Üí ~66 pol√≠ticas totales' as total_esperado;

-- =============================================
-- ROLLBACK (Si algo sale mal)
-- =============================================

/*
-- USUARIOS - Restaurar todas las pol√≠ticas:
CREATE POLICY "admin_all_usuarios" ON usuarios FOR ALL TO authenticated USING (check_user_role('admin'::text));
CREATE POLICY "Supervisores pueden ver usuarios" ON usuarios FOR SELECT TO authenticated USING ((get_my_role() = 'supervisor'::text));
CREATE POLICY "supervisor_select_usuarios" ON usuarios FOR SELECT TO authenticated USING (check_user_role('supervisor'::text));
CREATE POLICY "users_update_own_profile" ON usuarios FOR UPDATE TO authenticated USING ((id = auth.uid()));
CREATE POLICY "Update users" ON usuarios FOR UPDATE TO authenticated USING ((( SELECT auth.uid() AS uid) = id));
CREATE POLICY "Permitir lectura de usuarios a anonimos" ON usuarios FOR SELECT TO anon USING (true);
CREATE POLICY "users_select_own_profile" ON usuarios FOR SELECT TO authenticated USING ((id = auth.uid()));
CREATE POLICY "Select users" ON usuarios FOR SELECT TO authenticated USING ((( SELECT auth.uid() AS uid) = id));
CREATE POLICY "Insert users" ON usuarios FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Delete users" ON usuarios FOR DELETE TO authenticated USING ((( SELECT auth.uid() AS uid) = id));
CREATE POLICY "Permitir a usuarios gestionar su propio perfil" ON usuarios FOR ALL TO authenticated USING ((id = auth.uid()));

-- TRABAJADORES_TAREAS - Restaurar todas las pol√≠ticas:
CREATE POLICY "Admin puede gestionar todas las asignaciones de trabajadores" ON trabajadores_tareas FOR ALL TO public USING ((get_my_role() = 'admin'::text)) WITH CHECK ((get_my_role() = 'admin'::text));
CREATE POLICY "Enable delete for admins and supervisors" ON trabajadores_tareas FOR DELETE TO public USING ((get_my_role() = ANY (ARRAY['admin'::text, 'supervisor'::text])));
CREATE POLICY "Enable read access for assigned workers" ON trabajadores_tareas FOR SELECT TO public USING ((auth.uid() = id_trabajador));
CREATE POLICY "Permitir a supervisores ver trabajadores de sus tareas" ON trabajadores_tareas FOR SELECT TO public USING ((EXISTS ( SELECT 1 FROM supervisores_tareas st WHERE ((st.id_tarea = trabajadores_tareas.id_tarea) AND (st.id_supervisor = auth.uid())))));
CREATE POLICY "Permitir acceso a admin" ON trabajadores_tareas FOR ALL TO public USING ((get_my_role() = 'admin'::text));
CREATE POLICY "Permitir acceso a trabajadores" ON trabajadores_tareas FOR ALL TO public USING ((id_trabajador = auth.uid()));
CREATE POLICY "Supervisores pueden eliminar trabajadores de sus tareas" ON trabajadores_tareas FOR DELETE TO authenticated USING (((get_my_role() = 'supervisor'::text) AND (id_tarea IN ( SELECT supervisores_tareas.id_tarea FROM supervisores_tareas WHERE (supervisores_tareas.id_supervisor = auth.uid())))));
CREATE POLICY "Supervisores pueden gestionar asignaciones de trabajadores en s" ON trabajadores_tareas FOR ALL TO public USING (((get_my_role() = 'supervisor'::text) AND (id_tarea IN ( SELECT supervisores_tareas.id_tarea FROM supervisores_tareas WHERE (supervisores_tareas.id_supervisor = auth.uid())))));
CREATE POLICY "Supervisores pueden ver trabajadores de sus tareas" ON trabajadores_tareas FOR SELECT TO authenticated USING (((get_my_role() = 'supervisor'::text) AND (id_tarea IN ( SELECT supervisores_tareas.id_tarea FROM supervisores_tareas WHERE (supervisores_tareas.id_supervisor = auth.uid())))));
CREATE POLICY "Trabajadores pueden ver sus asignaciones de tareas" ON trabajadores_tareas FOR SELECT TO public USING (((get_my_role() = 'trabajador'::text) AND (id_trabajador = auth.uid())));
*/
